{"version":3,"sources":["main/m1-ui/common/Input/input.module.css","main/m1-ui/common/Button/Button.tsx","main/m1-ui/common/Checkbox/Checkbox.tsx","main/m1-ui/common/Input/Input.tsx","main/m1-ui/common/Preloader/Preloader.tsx","main/m1-ui/pages/LoginPage.tsx","main/m1-ui/pages/RegistrationPage.tsx","main/m1-ui/pages/PasswordResetPage.tsx","main/m1-ui/pages/PasswordGenerationPage.tsx","main/m1-ui/pages/ProfilePage.tsx","main/m1-ui/header/HeaderNavbar.tsx","main/m1-ui/App.tsx","serviceWorker.ts","main/m2-bll/store.ts","main/m2-bll/app-reducer.ts","main/m2-bll/login-reducer.ts","main/m2-bll/registration-reducer.ts","main/m2-bll/password-reset-reducer.ts","main/m2-bll/password-gereration-reducer.ts","main/m2-bll/profile-reducer.ts","index.tsx"],"names":["module","exports","Button","onClick","text","disabled","className","Checkbox","checked","onChange","event","currentTarget","type","Input","onEnterPress","value","error","placeholder","onBlur","style","group","autoFocus","color","onKeyPress","e","charCode","bar","Preloader","LoginPage","useState","setValue","setChecked","alert","RegistrationPage","PasswordResetPage","PasswordGenerationPage","ProfilePage","HeaderNavbar","to","App","exact","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","app","state","action","loginPage","registrationPage","passwordResetPage","passwordGenerationPage","profilePage","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ac64e8bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"input_group__3Gv8x\",\"bar\":\"input_bar__W2-9W\"};","import React from \"react\";\r\nimport \"./button.scss\"\r\n\r\ntype MyButtonType = {\r\n    onClick: () =>void\r\n    text :string\r\n    disabled?:boolean\r\n}\r\n\r\nexport function Button({onClick, text, disabled}: MyButtonType) {\r\n    return <div>\r\n        <button disabled={disabled} className=\"btn paper paper-raise-flatten\" onClick={onClick}>{text}</button>\r\n    </div>\r\n\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./checkbox.scss\"\r\n\r\ntype MyButtonType = {\r\n    text: string\r\n    checked: boolean\r\n    onClick: (check: boolean) => void\r\n}\r\n\r\nexport function Checkbox({text, checked, onClick}: MyButtonType) {\r\n    return <div className=\"checkbox-flex\">\r\n        <input checked={checked} onChange={event => onClick(event.currentTarget.checked)} type=\"checkbox\"\r\n               className=\"checkbox checkbox--blue\"/><span>{text}</span>\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport style from \"./input.module.css\"\r\n\r\ntype MyInputType = {\r\n    onChange: (e:string) =>void\r\n    onEnterPress?:(e:string)=>void\r\n    error:boolean\r\n    value:string\r\n    placeholder:string\r\n    onBlur?: ()=>void\r\n}\r\n\r\nexport function Input({onChange,onEnterPress, value, error, placeholder, onBlur}: MyInputType) {\r\n    const enterEvent = (e: any) => {\r\n        if (e.charCode === 13&&onEnterPress) {\r\n            onEnterPress((e.currentTarget.value))\r\n        }\r\n    }\r\n    return <div className={style.group}>\r\n        <input autoFocus={true} onBlur={onBlur}  style={error?{color:\"red\"}:{}} value={value} onKeyPress={enterEvent} placeholder={placeholder} type=\"text\" onChange={(e => onChange(e.currentTarget.value))}/>\r\n        <span className={style.bar}></span>\r\n    </div>\r\n\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./preloader.scss\"\r\nexport function Preloader() {\r\nreturn <div className='cssload-loader'>\r\n    <div className='cssload-inner cssload-one'></div>\r\n    <div className='cssload-inner cssload-two'></div>\r\n    <div className='cssload-inner cssload-three'></div>\r\n</div>\r\n\r\n}","import React, {useState} from \"react\";\r\nimport {Button} from \"../common/Button/Button\";\r\nimport {Checkbox} from \"../common/Checkbox/Checkbox\";\r\nimport {Input} from \"../common/Input/Input\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\nfunction LoginPage() {\r\n    let [value, setValue] = useState<string>(\"Custom input\")\r\n    let [checked, setChecked] = useState<boolean>(true)\r\n\r\n    const onChangeCheckbox = (checked: boolean) => setChecked(checked)\r\n    const onChange = (e: string) => setValue(e)\r\n    const onEnterPress = (e: string) => {\r\n        alert(e);\r\n        setValue(\"\")\r\n    }\r\n    const onClick = () => alert(\"done\")\r\n    return (\r\n        <div>\r\n            <h1>Login Page</h1>\r\n            <h2>My components:</h2>\r\n            <div>\r\n                <Input error={false} value={value} onChange={onChange} placeholder={\"Custom input\"}\r\n                       onEnterPress={onEnterPress}/>\r\n                <Checkbox onClick={onChangeCheckbox} checked={checked} text={\"Custom checkbox\"}/>\r\n                <Button disabled={false} text={\"Custom button\"} onClick={onClick}/>\r\n                <h4>Preloader:</h4>\r\n                <Preloader/>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage;","import React from \"react\";\r\n\r\n\r\nfunction RegistrationPage() {\r\n    return (\r\n        <div>\r\n            <h1>Registration Page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegistrationPage;","import React from \"react\";\r\n\r\n\r\nfunction PasswordResetPage() {\r\n    return (\r\n        <div>\r\n            <h1>Password Reset Page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PasswordResetPage;","import React from \"react\";\r\n\r\n\r\nfunction PasswordGenerationPage() {\r\n    return (\r\n        <div>\r\n            <h1>Password Generation Page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PasswordGenerationPage;","import React from \"react\";\r\n\r\n\r\nfunction ProfilePage() {\r\n    return (\r\n        <div>\r\n            <h1>Profile Page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfilePage;","import React from \"react\";\r\nimport \"./headerNavbar.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction HeaderNavbar() {\r\n    return (\r\n     <div className=\"nav-container\">\r\n             <nav className=\"menu\">\r\n                 <ul className=\"menu__list\">\r\n                     <li className=\"menu__group\"><NavLink className=\"menu__link\" to=\"/login\">login</NavLink></li>\r\n                     <li className=\"menu__group\"><NavLink className=\"menu__link\" to=\"/registration\">registration</NavLink></li>\r\n                     <li className=\"menu__group\"><NavLink className=\"menu__link\" to=\"/password-reset\">password reset</NavLink></li>\r\n                     <li className=\"menu__group\"><NavLink className=\"menu__link\" to=\"/password-generation\">password generation</NavLink></li>\r\n                     <li className=\"menu__group\"><NavLink className=\"menu__link\" to=\"/profile\">profile</NavLink></li>\r\n                 </ul>\r\n             </nav>\r\n\r\n     </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HeaderNavbar;\r\n","import React from 'react';\nimport './App.css';\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegistrationPage from \"./pages/RegistrationPage\";\nimport PasswordResetPage from \"./pages/PasswordResetPage\";\nimport PasswordGenerationPage from \"./pages/PasswordGenerationPage\";\nimport ProfilePage from \"./pages/ProfilePage\";\nimport HeaderNavbar from \"./header/HeaderNavbar\";\n\n\nfunction App() {\n    return (\n        <HashRouter>\n            <div className=\"App\">\n                <HeaderNavbar/>\n                <>\n                    <Switch>\n                        <Route exact path={\"/\"} render={() => (<LoginPage/>)}/>\n                        <Route path={\"/login/\"} render={() => (<LoginPage/>)}/>\n                        <Route path=\"/registration\" render={() => (<RegistrationPage/>)}/>\n                        <Route path=\"/password-reset\" render={() => (<PasswordResetPage/>)}/>}\n                        <Route path=\"/password-generation\" render={() => (<PasswordGenerationPage/>)}/>\n                        <Route path=\"/profile\" render={() => (<ProfilePage/>)}/>\n                    </Switch>\n                </>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {passwordResetReducer} from \"./password-reset-reducer\";\r\nimport {passwordGenerationReducer} from \"./password-gereration-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    loginPage: loginReducer,\r\n    registrationPage: registrationReducer,\r\n    passwordResetPage: passwordResetReducer,\r\n    passwordGenerationPage: passwordGenerationReducer,\r\n    profilePage: profileReducer\r\n\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","const initialState: InitialStateType = null\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const ActionCreator = () => ({type: ''} as const)\r\n\r\nexport type ActionCreatorActionType = ReturnType<typeof ActionCreator>\r\nexport type InitialStateType = any\r\ntype ActionsType =\r\n    | ActionCreatorActionType\r\n","const initialState: InitialStateType = null\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const ActionCreator = () => ({type: ''} as const)\r\n\r\nexport type ActionCreatorActionType = ReturnType<typeof ActionCreator>\r\nexport type InitialStateType = any\r\ntype ActionsType =\r\n    | ActionCreatorActionType","const initialState: InitialStateType = null\r\n\r\nexport const registrationReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const ActionCreator = () => ({type: ''} as const)\r\n\r\nexport type ActionCreatorActionType = ReturnType<typeof ActionCreator>\r\nexport type InitialStateType = any\r\ntype ActionsType =\r\n    | ActionCreatorActionType\r\n\r\n","const initialState: InitialStateType = null\r\n\r\nexport const passwordResetReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const ActionCreator = () => ({type: ''} as const)\r\n\r\nexport type ActionCreatorActionType = ReturnType<typeof ActionCreator>\r\nexport type InitialStateType = any\r\ntype ActionsType =\r\n    | ActionCreatorActionType","const initialState: InitialStateType = null\r\n\r\nexport const passwordGenerationReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const ActionCreator = () => ({type: ''} as const)\r\n\r\nexport type ActionCreatorActionType = ReturnType<typeof ActionCreator>\r\nexport type InitialStateType = any\r\ntype ActionsType =\r\n    | ActionCreatorActionType","const initialState: InitialStateType = null\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const ActionCreator = () => ({type: ''} as const)\r\n\r\nexport type ActionCreatorActionType = ReturnType<typeof ActionCreator>\r\nexport type InitialStateType = any\r\ntype ActionsType =\r\n    | ActionCreatorActionType","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./main/m2-bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
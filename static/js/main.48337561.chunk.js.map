{"version":3,"sources":["main/m2-bll/app-reducer.ts","main/m1-ui/common/ErrorSnackbar/ErrorSnackbar.tsx","main/m1-ui/utils/error-utils.ts","main/m3-dal/register-api.ts","main/m2-bll/registration-reducer.ts","main/m1-ui/common/Preloader/Preloader.tsx","features/f1-auth/a2-registration/RegistrationNew.tsx","main/m1-ui/pages/RegistrationPage.tsx","main/m3-dal/password-recovery-api.ts","main/m2-bll/password-reset-reducer.ts","features/f1-auth/a3-password_recovery/ResetPassword-New.tsx","main/m1-ui/pages/PasswordResetPage.tsx","main/m2-bll/password-gereration-reducer.ts","features/f1-auth/a3-password_recovery/GenerateNewPassword-New.tsx","main/m1-ui/pages/PasswordGenerationPage.tsx","main/m3-dal/login-api.ts","main/m2-bll/login-reducer.ts","main/m2-bll/profile-reducer.ts","main/m1-ui/pages/ProfilePage.tsx","main/m1-ui/header/HeaderNavbar.tsx","features/f1-auth/a1-login/LoginNew.tsx","main/m1-ui/pages/LoginPage.tsx","main/m3-dal/tableApi.ts","main/m2-bll/table-reduser.ts","features/f2-table/a2-TableOfCards/TableCards.tsx","features/f2-table/a2-TableOfCards/CardsPage.tsx","main/m1-ui/pages/CardsPage.tsx","features/f2-table/a1-TableOfPacks/TablePacks.tsx","main/m1-ui/common/Paginator/Paginator.tsx","features/f2-table/a1-TableOfPacks/PacksPage.tsx","main/m1-ui/pages/PacksPage.tsx","main/m1-ui/App.tsx","serviceWorker.ts","main/m2-bll/store.ts","index.tsx","main/m1-ui/header/headerNavbar.module.css","features/f2-table/a1-TableOfPacks/css.module.css","features/f2-table/a2-TableOfCards/css.module.css","main/m1-ui/common/Paginator/css.module.css"],"names":["initialState","setAppErrorAC","error","type","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","handleServerNetworkError","response","data","message","status","instance","axios","create","baseURL","withCredentials","registrationApi","post","isRegistered","isLoading","setIsRegistratedAC","value","setIsLoadingAC","Preloader","className","Copyright","Typography","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","RegistrationNew","classes","registrationPage","checkEmail","checkPassword","formik","useFormik","validate","values","test","email","password","initialValues","onSubmit","then","res","catch","setTimeout","registrationTC","to","Container","component","maxWidth","CssBaseline","Avatar","handleSubmit","TextField","required","fullWidth","id","name","autoComplete","autoFocus","label","getFieldProps","errors","Button","Grid","container","item","xs","Box","mt","RegistrationPage","passwordRecoveryApi","newPasswordData","loading","setLoadingAC","ResetPasswordNew","passwordResetPage","from","alert","info","PasswordResetPage","GenerateNewPasswordNew","passwordGenerationPage","useParams","history","useHistory","push","setNewPasswordTC","resetPasswordToken","PasswordGenerationPage","authAPI","delete","isLoginIn","UserData","isAdmin","rememberMe","token","tokenDeathTime","__v","_id","success","setIsLoggedInAC","setUsersDataAC","Userdata","isInitialized","isInitializedTC","console","log","ProfilePage","auth","profilePage","useEffect","exact","src","alt","style","height","HeaderNavbar","location","useLocation","logoutHandler","useCallback","pathname","length","menu","menu__list","menu__group","menu__link","onClick","menu__link_logout","LoginNew","FormControlLabel","control","Checkbox","checked","LoginPage","TableApi","page","get","put","cardsPack_id","packs","cards","paginator","currentPage","packsCount","startPage","endPage","getPacksTC","setPacksAC","cardPacks","setPacksTotalCountAC","cardPacksTotalCount","setCardsAC","count","setStartPagePaginatorAC","setEndPagePaginatorAC","setCurrentPagerAC","Buttons","buttonsData","map","i","onclick","Handler","cardId","packId","PackId","card","ColumnsName","Content","RowContent","Data","question","answer","grade","updated","TableForCards","Table","HeaderTable","columnsName","ContentTable","rowContent","CardPage","CardsData","table","checkAuth","updateCardTC","deleteCardTC","CardsPage","e","cardsCount","TableForPacks","Paginator","startValue","buttons","maxPages","Main","Pagination","goStart","b","goPage","endValue","goFinish","PackPage","PacksData","paginatorData","Math","ceil","cardsPack","PacksPage","App","path","render","Boolean","window","hostname","match","rootReducer","combineReducers","action","CopyState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.48337561.chunk.js","sourcesContent":["const initialState: InitialStateType = {\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType =  'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppInitializedAC = (isInitialized:  boolean) => ({ type: 'APP/SET-INITIALIZED', isInitialized } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppInitializedActionType\r\n\r\n\r\nexport type InitialStateType = any\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {setAppErrorAC} from \"../../../m2-bll/app-reducer\";\r\n\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = !!error ;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, SetAppErrorActionType, SetAppStatusActionType, setAppStatusAC} from '../../m2-bll/app-reducer'\r\n\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.response ? error.response.data.error : error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import axios from \"axios\"\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    ...settings\r\n})\r\n\r\n// api\r\n\r\n\r\nexport const registrationApi = {\r\n    setRegister(data:RegistretionDataType) {\r\n        const promise = instance.post('auth/register',data );\r\n        return promise;\r\n    }\r\n}\r\n\r\n\r\nexport type RegistretionDataType = {\r\n    email: string\r\n    password: string\r\n}\r\n","import {handleServerNetworkError} from \"../m1-ui/utils/error-utils\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {registrationApi, RegistretionDataType} from \"../m3-dal/register-api\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isRegistered: false,\r\n    isLoading:false,\r\n}\r\n\r\nexport const registrationReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n\r\n        case 'SET-IS-REGISTATED':\r\n            return {...state, isRegistered: action.value}\r\n        case 'SET-IS-LOADING':\r\n            return {...state, isLoading: action.value}\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n// thunks\r\nexport const registrationTC = (data: RegistretionDataType) => (dispatch: ThunkDispatch) => {\r\n    registrationApi.setRegister(data)\r\n        .then(res => {\r\n            dispatch(setIsRegistratedAC(true))\r\n            dispatch(setIsLoadingAC(false))\r\n        }).catch((error) => {\r\n        dispatch(setIsLoadingAC(false))\r\n        handleServerNetworkError(error, dispatch);\r\n        setTimeout(() => dispatch(setAppErrorAC(null)), 3000);\r\n\r\n    })\r\n}\r\n\r\n\r\n// Action Creators\r\nexport const setIsRegistratedAC = (value: boolean): setIsRegistratedActionType =>\r\n    ({type: 'SET-IS-REGISTRATED', value} as const)\r\nexport const setIsLoadingAC = (value: boolean): setIsLoadingActionType =>\r\n    ({type: 'SET-IS-LOADING', value} as const)\r\n\r\n\r\n// Types\r\n\r\nexport type InitialStateType = any\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n\r\n\r\ntype ActionsType = setIsRegistratedActionType | setIsLoadingActionType\r\n\r\nexport type setIsRegistratedActionType = {\r\n    type: string\r\n    value: boolean\r\n}\r\nexport type setIsLoadingActionType = {\r\n    type: string\r\n    value: boolean\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./preloader.scss\"\r\nexport function Preloader() {\r\nreturn <div className='cssload-loader'>\r\n    <div className='cssload-inner cssload-one'></div>\r\n    <div className='cssload-inner cssload-two'></div>\r\n    <div className='cssload-inner cssload-three'></div>\r\n</div>\r\n\r\n}","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {registrationTC, setIsLoadingAC} from \"../../../main/m2-bll/registration-reducer\";\r\nimport {Preloader} from \"../../../main/m1-ui/common/Preloader/Preloader\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function RegistrationNew() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.registrationPage.isRegistered);\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.registrationPage.isLoading);\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n\r\n    const checkEmail = /\\S+@\\S+\\.\\S+/\r\n    const checkPassword = /(?=.*[0-9])(?=.*[a-z])[0-9a-z]{8,}/\r\n\r\n    const formik = useFormik({validate: (values) => {\r\n            if (checkEmail.test(values.email) === false) {\r\n                return {\r\n                    email: 'Please enter your email'\r\n                }\r\n            }\r\n            if (checkPassword.test(values.password) === false) {\r\n                return {\r\n                    password: 'Please enter your password'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        onSubmit: values => {\r\n            let data = {\r\n                email: values.email,\r\n                password: values.password\r\n            }\r\n            dispatch(setIsLoadingAC(true))\r\n            dispatch(registrationTC(data))\r\n        },\r\n    });\r\n\r\n\r\n    if (isRegistered === true) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (isLoading === true ? <Preloader/>:\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign Up\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign Up\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <NavLink to={\"/login\"} >\r\n                                Already have an account? Sign In\r\n                            </NavLink>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport RegisterPage from \"../../../features/f1-auth/a2-registration/RegistrationPage\";\r\nimport RegistrationNew from \"../../../features/f1-auth/a2-registration/RegistrationNew\";\r\n\r\n\r\nfunction RegistrationPage() {\r\n    return (\r\n        <RegistrationNew/>\r\n    );\r\n}\r\n\r\nexport default RegistrationPage;","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/2.0/\" ,//'https://neko-back.herokuapp.com/2.0/',\r\n})\r\n\r\n// api\r\nexport const passwordRecoveryApi = {\r\n    forgot(data:dataType) {\r\n        const promise = instance.post('/auth/forgot',data );\r\n        return promise;\r\n    },\r\n    setNewPassword(newPasswordData:newPasswordDataType) {\r\n        const promise = instance.post('/auth/set-new-password',newPasswordData);\r\n        return promise;\r\n    }\r\n}\r\n\r\nexport type dataType = {\r\n    email: string\r\n    from: string\r\n    message: any\r\n}\r\nexport type newPasswordDataType = {\r\n    password:string\r\n    resetPasswordToken:string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {passwordRecoveryApi} from \"../m3-dal/password-recovery-api\";\r\n\r\nconst initialState: InitialStateType = {\r\n    loading: false,\r\n    response: null\r\n}\r\n\r\nexport const passwordResetReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return {...state, loading: action.loading}\r\n        case \"SET-PASS-RESET-RESPONSE\":\r\n            return {...state, response: action.response}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const setLoadingAC = (loading: boolean) => ({type: 'LOADING', loading} as const)\r\nexport const setResponseAC = (response: ResponseType) => ({type: 'SET-PASS-RESET-RESPONSE', response} as const)\r\n\r\nexport const resetPasswordTC = (email: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setLoadingAC(true))\r\n    let data = {\r\n        email: email,\r\n        from: \"test-front-admin\",\r\n        message: `<div style = \"background-color: lime; padding: 15px\">\r\n            password recovery link:\r\n    <a href='http://localhost:3000/study-cards#/password-generation/$token$'>link</a>\r\n    </div>`\r\n    }\r\n    passwordRecoveryApi.forgot(data).then((res: any) => {\r\n        if (res.status === 200) {\r\n            dispatch(setResponseAC(res.data))\r\n            dispatch(setLoadingAC(false))\r\n            alert(res.data.info)\r\n        }\r\n    }).catch(reason => {\r\n        alert(reason)\r\n        dispatch(setLoadingAC(false))\r\n    })\r\n}\r\n\r\n\r\nexport type setLoadingACType = ReturnType<typeof setLoadingAC>\r\nexport type setResponseACType = ReturnType<typeof setResponseAC>\r\nexport type InitialStateType = {\r\n    loading: boolean,\r\n    response: null|ResponseType\r\n}\r\ntype ActionsType =\r\n    | setLoadingACType\r\n    | setResponseACType\r\n\r\n\r\ntype ResponseType = {\r\n    info: string\r\n    success: boolean\r\n    answer: boolean\r\n    html: boolean\r\n}","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nimport {Preloader} from \"../../../main/m1-ui/common/Preloader/Preloader\";\r\nimport {resetPasswordTC} from \"../../../main/m2-bll/password-reset-reducer\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function ResetPasswordNew() {\r\n    const classes = useStyles();\r\n    let dispatch = useDispatch()\r\n    let loading = useSelector<AppRootStateType, boolean>(state => state.passwordResetPage.loading)\r\n\r\n\r\n    const formik = useFormik({\r\n        validate:(values)=>{\r\n            if (!values.email){\r\n                return {\r\n                    email: 'Please enter your new email'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email:'',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(resetPasswordTC(values.email));\r\n        },\r\n    });\r\n\r\n\r\n    return (loading ? <Preloader/> :\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Email for password recovery\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                   Send\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport ResetPassword from \"../../../features/f1-auth/a3-password_recovery/ResetPassword\";\r\nimport ResetPasswordNew from \"../../../features/f1-auth/a3-password_recovery/ResetPassword-New\";\r\n\r\n\r\nfunction PasswordResetPage() {\r\n    return <ResetPasswordNew/>\r\n}\r\n\r\nexport default PasswordResetPage;","import {Dispatch} from \"redux\";\r\nimport {passwordRecoveryApi, newPasswordDataType} from \"../m3-dal/password-recovery-api\";\r\nimport {setLoadingAC, setLoadingACType} from \"./password-reset-reducer\";\r\n\r\n\r\nconst initialState:InitialStateType =\r\n    {\r\n        loading: false,\r\n        response: null\r\n    }\r\nexport const passwordGenerationReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return {...state, loading: action.loading}\r\n        case \"SET-PASS-GENERATION-RESPONSE\":\r\n            return {...state, response: action.response}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setPassGenerationResponseAC = (response: { info: string }) => ({\r\n    type: \"SET-PASS-GENERATION-RESPONSE\",\r\n    response\r\n} as const)\r\n\r\n\r\nexport const setNewPasswordTC = (newPasswordData: newPasswordDataType, history:any) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setLoadingAC(true))\r\n    passwordRecoveryApi.setNewPassword(newPasswordData).then((res: any) => {\r\n        if (res.status === 200) {\r\n            dispatch(setPassGenerationResponseAC(res.data))\r\n            dispatch(setLoadingAC(false))\r\n            alert(res.data.info)\r\n            history.push('/login/')\r\n        }\r\n    }).catch(reason => {\r\n        alert(reason)\r\n        dispatch(setLoadingAC(false))\r\n    })\r\n}\r\n\r\nexport type setPassGenerationResponseACType = ReturnType<typeof setPassGenerationResponseAC>\r\nexport type InitialStateType =    {\r\n    loading: boolean\r\n    response: { info: string } | null\r\n}\r\ntype ActionsType =\r\n    | setLoadingACType\r\n    | setPassGenerationResponseACType","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport {InitialStateType, setNewPasswordTC} from \"../../../main/m2-bll/password-gereration-reducer\";\r\nimport {Preloader} from \"../../../main/m1-ui/common/Preloader/Preloader\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function GenerateNewPasswordNew() {\r\n    let state = useSelector<AppRootStateType, InitialStateType>(state => state.passwordGenerationPage)\r\n\r\n    const classes = useStyles();\r\n    const {id} = useParams();\r\n    const history = useHistory()\r\n    let dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        validate:(values)=>{\r\n            if (!values.password){\r\n                return {\r\n                    password: 'Please enter your new password'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            password:'',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setNewPasswordTC({password: values.password, resetPasswordToken: id}, history));\r\n        },\r\n    });\r\n\r\n\r\n    return (state.loading ? <Preloader/> :\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    New password\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"New password\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Set new password\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport GenerateNewPassword from \"../../../features/f1-auth/a3-password_recovery/GenerateNewPassword\";\r\nimport GenerateNewPasswordNew from \"../../../features/f1-auth/a3-password_recovery/GenerateNewPassword-New\";\r\n\r\nfunction PasswordGenerationPage() {\r\n    return <GenerateNewPasswordNew/>\r\n}\r\n\r\nexport default PasswordGenerationPage;","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete('auth/me');\r\n        return promise;\r\n    },\r\n    authMe() {\r\n        return instance.post('auth/me', {});\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    password: string\r\n    rememberMe: boolean\r\n    email: string;\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../m3-dal/login-api\";\r\nimport {handleServerNetworkError} from \"../m1-ui/utils/error-utils\";\r\n\r\n\r\nexport type userDate = {\r\n    email : string\r\n    name : string\r\n    isAdmin: boolean\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    __v:number\r\n    _id: string\r\n    success:boolean\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    isLoginIn: boolean,\r\n    UserData: userDate\r\n}\r\nconst initialState: InitialStateType = {\r\n    isLoginIn: false,\r\n    UserData: {\r\n        email : \"\",\r\n        name : \"\",\r\n        isAdmin: false,\r\n        rememberMe: false,\r\n        token: \"\",\r\n        tokenDeathTime: 0,\r\n        __v: 0,\r\n        _id: \"\",\r\n        success: false,\r\n    }\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'SET-IS-LOGIN-IN':\r\n            return {...state, isLoginIn: action.value}\r\n        case 'SET-IS-LOGOUT-IN':\r\n            return {...state, isLoginIn: action.value}\r\n        case 'SET-USER-DATA-IN':\r\n            return {...state, UserData: action.Userdata}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'SET-IS-LOGIN-IN', value} as const)\r\nexport const setUsersDataAC = (Userdata: userDate) =>\r\n    ({type: 'SET-USER-DATA-IN', Userdata} as const)\r\nexport const setIsLogoutInAC = (value: boolean) =>\r\n    ({type: 'SET-IS-LOGOUT-IN', value} as const)\r\nexport const setTokenAC = (token: string) =>\r\n    ({type: 'SET-IS-LOGIN-IN', token} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch) => {\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setUsersDataAC(res.data))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(false))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n    })\r\n}\r\n\r\n// types\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setUsersDataAC>\r\n    | ReturnType<typeof setIsLogoutInAC>\r\n\r\n\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {authAPI} from \"../m3-dal/login-api\";\r\nimport {setIsLoggedInAC, setUsersDataAC} from \"./login-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const ProfileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case'SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'SET-INITIALIZED', isInitialized} as const)\r\n\r\n\r\n// thunks\r\nexport const isInitializedTC = () => (dispatch: ThunkDispatch) => {\r\n    authAPI.authMe().then(res => {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setInitializedAC(true))\r\n        dispatch(setUsersDataAC(res.data))\r\n    })\r\n        .catch(error => console.log(error))\r\n}\r\n\r\n// types\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setInitializedAC>\r\n    | ReturnType<typeof setUsersDataAC>\r\ntype InitialStateType = {\r\n    isInitialized: boolean,\r\n\r\n}\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {isInitializedTC} from \"../../m2-bll/profile-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {userDate} from \"../../m2-bll/login-reducer\";\r\n\r\n\r\nfunction ProfilePage() {\r\n\r\n    const {name,email} = useSelector<AppRootStateType,userDate>((state)=> state.auth.UserData)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.profilePage.isInitialized)\r\n    const dispatch = useDispatch();\r\n    const isLoginIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoginIn);\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(isInitializedTC());\r\n    },[])\r\n    if(isLoginIn === false){\r\n        return <Redirect exact to={'/login'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Name:{name}</h1>\r\n            <img src={\"\"} alt=\"\" style={{width:'100px', height:'100px'}}/>\r\n            <div>E-mail: {email}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfilePage;","import React, {useCallback} from \"react\";\r\nimport style from \"./headerNavbar.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logoutTC} from \"../../m2-bll/login-reducer\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {useLocation} from \"react-router\";\r\n\r\nfunction HeaderNavbar() {\r\n    const location = useLocation()\r\n    const dispatch = useDispatch();\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoginIn);\r\n\r\n    if (isLoginIn === false && location.pathname.length !== 57) {\r\n        return <Redirect exact to={'/login'}/>\r\n    }\r\n    return (\r\n        <nav className={style.menu}>\r\n            <ul className={style.menu__list}>\r\n                {isLoginIn && <li className={style.menu__group}>\r\n\t\t\t\t</li>}\r\n                <li className={style.menu__group}>\r\n                    <NavLink className={style.menu__link} to=\"/profile\">My Profile</NavLink></li>\r\n\r\n                <li className={style.menu__group}>\r\n                    <NavLink className={style.menu__link} to=\"/Packs\">Packs</NavLink></li>\r\n                <li className={style.menu__group}>\r\n                    <NavLink className={style.menu__link} to=\"/password-reset\">Settings</NavLink></li>\r\n                <button onClick={logoutHandler} className={style.menu__link_logout}>Log out</button>\r\n            </ul>\r\n        </nav>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default HeaderNavbar;\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../../main/m2-bll/login-reducer\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {FormGroup} from \"@material-ui/core\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function LoginNew() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const isLoginIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoginIn);\r\n\r\n    const formik = useFormik({\r\n        validate:(values)=>{\r\n            if (!values.email){\r\n                return {\r\n                    email:'Please enter your email'\r\n                }\r\n            }\r\n            if (!values.password){\r\n                return {\r\n                    password: 'Please enter your password'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password:'',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    });\r\n\r\n    if(isLoginIn === true){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox color={\"primary\"}/>}\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                        checked={formik.values.rememberMe}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <NavLink to={\"/password-reset\"} >\r\n                                Forgot password?\r\n                            </NavLink>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <NavLink to={\"/registration\"}>\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </NavLink>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport Login from \"../../../features/f1-auth/a1-login/Login\";\r\nimport LoginNew from \"../../../features/f1-auth/a1-login/LoginNew\";\r\n\r\n\r\nfunction LoginPage() {\r\n\r\n    return <LoginNew/>\r\n}\r\n\r\nexport default LoginPage;","import axios from \"axios\"\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    ...settings\r\n})\r\n\r\n// api\r\n\r\n\r\nexport const TableApi = {\r\n    getPacks(page:number) {\r\n        const promise = instance.get(`cards/pack?&page=${page}&pageCount=25` );\r\n        return promise;\r\n    },\r\n    addPack(data:AddPackDataType) {\r\n        const promise = instance.post('cards/pack',data);\r\n        return promise;\r\n    },\r\n    deletePack(data:string) {\r\n        const promise = instance.delete(`cards/pack?id=${data}`);\r\n        return promise;\r\n    },\r\n    updatePack(data:UpdatePackDataType) {\r\n        const promise = instance.put('cards/pack',data );\r\n        return promise;\r\n    },\r\n    getCards(data:GetCardsDataType) {\r\n        const promise = instance.get(`cards/card?&cardsPack_id=${data.cardsPack_id}&pageCount=100` );\r\n        return promise;\r\n    },\r\n    addCard(data:AddCardDataType) {\r\n        const promise = instance.post('cards/card',data);\r\n        return promise;\r\n    },\r\n    deleteСard(data:string) {\r\n        const promise = instance.delete(`cards/card?id=${data}`);\r\n        return promise;\r\n    },\r\n    updateСard(data:UpdateCardDataType) {\r\n        const promise = instance.put(`cards/card`,data);\r\n        return promise;\r\n    },\r\n}\r\nexport type AddPackDataType = {\r\n    cardsPack: {\r\n        name?:string\r\n        path?:string\r\n        grade?:number\r\n        shots?:number\r\n        rating?:number\r\n        deckCover?:string\r\n        private?:false\r\n        type?:string\r\n    }\r\n}\r\nexport type UpdatePackDataType = {\r\n    cardsPack: {\r\n        _id:string\r\n        name?:string\r\n        path?:string\r\n        grade?:number\r\n        shots?:number\r\n        rating?:number\r\n        deckCover?:string\r\n        private?:false\r\n        type?:string\r\n    }\r\n}\r\nexport type GetCardsDataType = {\r\n    cardsPack_id: string\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type AddCardDataType = {\r\n    card: {\r\n        cardsPack_id: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        answerImg?: string\r\n        questionImg?: string\r\n        questionVideo?: string\r\n        answerVideo?: string\r\n        type?: string\r\n    }\r\n}\r\nexport type UpdateCardDataType = {\r\n    card: {\r\n        _id: string\r\n        question?: string\r\n        comments?: string\r\n    }\r\n    packId:string\r\n\r\n}\r\nexport type DeleteCardDataType = {\r\n    cardId: string\r\n    packId: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {\r\n    AddCardDataType,\r\n    AddPackDataType, DeleteCardDataType,\r\n    GetCardsDataType,\r\n    TableApi,\r\n    UpdateCardDataType,\r\n    UpdatePackDataType\r\n} from \"../m3-dal/tableApi\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {handleServerNetworkError} from \"../m1-ui/utils/error-utils\";\r\n\r\nexport type PaginatorType = {\r\n    packsCount: number\r\n    startPage: number\r\n    endPage:number\r\n    currentPage: number\r\n}\r\ntype StateType = {\r\n    // cards: Array<CardType> | null\r\n    // packs: Array<PackType> | null\r\n    cards: any\r\n    packs:any\r\n    isLoading: boolean\r\n    paginator:PaginatorType\r\n}\r\n\r\nconst initialState: StateType = {\r\n    packs: null,\r\n    cards: null,\r\n    isLoading: false,\r\n    paginator:{\r\n        currentPage: 1,\r\n        packsCount: 1,\r\n        startPage: 1,\r\n        endPage:5,\r\n    }\r\n\r\n}\r\n\r\nexport const tableReducer = (state = initialState, action: ActionType): StateType => {\r\n    switch (action.type) {\r\n        case 'SET-PACKS':\r\n            return {...state, packs: action.packs}\r\n        case 'SET-IS-LOADING':\r\n            return {...state, isLoading: action.value}\r\n        case 'SET-CARDS':\r\n            return {...state, cards: action.cards}\r\n        case 'SET-COUNT':{\r\n            let CopyState = {...state,...state.paginator}\r\n            CopyState.paginator.packsCount = action.count\r\n            return CopyState}\r\n        case 'SET-START-VALUE-PR':{\r\n            let CopyState = {...state,...state.paginator}\r\n            CopyState.paginator.startPage = action.value\r\n            return CopyState}\r\n        case 'SET-END-VALUE-PR':{\r\n            let CopyState = {...state,...state.paginator}\r\n            CopyState.paginator.endPage = action.value\r\n            return CopyState}\r\n        case 'SET-CURRENT-PAGE':{\r\n            let CopyState = {...state,...state.paginator}\r\n            CopyState.paginator.currentPage = action.value\r\n            return CopyState}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n// thunks\r\n\r\ntype ThunkDispatch = Dispatch<ActionType | SetAppStatusActionType | SetAppErrorActionType>\r\n\r\nexport const getPacksTC = (currentPage:number) => (dispatch: ThunkDispatch) => {\r\n    setIsLoadingAC(true)\r\n    TableApi.getPacks(currentPage).then(res => {\r\n        dispatch(setPacksAC(res.data.cardPacks))\r\n        dispatch(setPacksTotalCountAC(res.data.cardPacksTotalCount))\r\n        dispatch(setIsLoadingAC(false))\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const addPackTC = (data: AddPackDataType,currentPage:number) => (dispatch: ThunkDispatch) => {\r\n    setIsLoadingAC(true)\r\n    TableApi.addPack(data).then(res => {\r\n        TableApi.getPacks(currentPage).then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n            dispatch(setIsLoadingAC(false))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const deletePackTC = (data: string,currentPage:number) => (dispatch: ThunkDispatch) => {\r\n    setIsLoadingAC(true)\r\n    TableApi.deletePack(data).then(res => {\r\n        TableApi.getPacks(currentPage).then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n            dispatch(setIsLoadingAC(false))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const updatePackTC = (data: UpdatePackDataType,currentPage:number) => (dispatch: ThunkDispatch) => {\r\n    setIsLoadingAC(true)\r\n    TableApi.updatePack(data).then(res => {\r\n        TableApi.getPacks(currentPage).then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n            dispatch(setIsLoadingAC(false))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n\r\nexport const getCardsTC = (data: GetCardsDataType) => (dispatch: ThunkDispatch) => {\r\n    setIsLoadingAC(true)\r\n    TableApi.getCards(data)\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setCardsAC(res.data.cards))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const deleteCardTC = (data: DeleteCardDataType) => (dispatch: ThunkDispatch) => {\r\n    debugger\r\n    setIsLoadingAC(true)\r\n    TableApi.deleteСard(data.cardId).then(res => {\r\n        TableApi.getCards({cardsPack_id: data.packId}).then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setCardsAC(res.data.cards))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    })\r\n}\r\nexport const updateCardTC = (data: UpdateCardDataType) => (dispatch: ThunkDispatch) => {\r\n    setIsLoadingAC(true)\r\n    TableApi.updateСard(data).then(res => {\r\n        TableApi.getCards({cardsPack_id: data.packId}).then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setCardsAC(res.data.cards))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    })\r\n}\r\nexport const addCardTC = (data: AddCardDataType) => (dispatch: ThunkDispatch) => {\r\n    setIsLoadingAC(true)\r\n    TableApi.addCard(data).then(res => {\r\n        TableApi.getCards({cardsPack_id: data.card.cardsPack_id}).then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setCardsAC(res.data.cards))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    })\r\n}\r\n\r\n\r\n// Action Creators\r\n\r\nexport const setPacksAC = (packs: PackType) => ({type: 'SET-PACKS', packs} as const)\r\nexport const setIsLoadingAC = (value: boolean) => ({type: 'SET-IS-LOADING', value} as const)\r\nexport const setCardsAC = (cards: CardsType) => ({type: 'SET-CARDS', cards} as const)\r\nexport const setPacksTotalCountAC = (count: number) => ({type: 'SET-COUNT', count} as const)\r\nexport const setStartPagePaginatorAC = (value: number) => ({type: 'SET-START-VALUE-PR', value} as const)\r\nexport const setEndPagePaginatorAC = (value: number) => ({type: 'SET-END-VALUE-PR', value} as const)\r\nexport const setCurrentPagerAC = (value: number) => ({type: 'SET-CURRENT-PAGE', value} as const)\r\n\r\ntype setCardsActionType = ReturnType<typeof setCardsAC>\r\ntype setPacksActionType = ReturnType<typeof setPacksAC>\r\ntype setLoadingActionType = ReturnType<typeof setIsLoadingAC>\r\ntype setPacksTotalCountActionType = ReturnType<typeof setPacksTotalCountAC>\r\nexport type setStartPagePaginatorActionType = ReturnType<typeof setStartPagePaginatorAC>\r\ntype setEndPagePaginatorActionType = ReturnType<typeof setEndPagePaginatorAC>\r\ntype setCurrentPagerActionType = ReturnType<typeof setCurrentPagerAC>\r\n\r\ntype ActionType = setLoadingActionType | setPacksActionType | setCardsActionType | setPacksTotalCountActionType |\r\n    setStartPagePaginatorActionType | setEndPagePaginatorActionType | setCurrentPagerActionType\r\n\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    cardsCount: number\r\n    type: string\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n    __v: number\r\n    deckCover: any\r\n}\r\nexport type CardsType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n","import style from \"./css.module.css\";\r\nimport React from \"react\";\r\nimport {CardType, PackType} from \"../../../main/m2-bll/table-reduser\";\r\n\r\n\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    onClick?: (data:any) => any\r\n}\r\n\r\ntype ButtonsPropsType = {\r\n    buttonsData: Array<ButtonType>\r\n    cardId: string\r\n    PackId: string\r\n}\r\n\r\nfunction Buttons(props: ButtonsPropsType) {\r\n    return (\r\n        <div>\r\n            {props.buttonsData.map((i) => {\r\n                let onclick = i.onClick\r\n                let Handler = () => {}\r\n                if (i.name === \"Delete\"){ Handler = () => {if (onclick) onclick({cardId: props.cardId,packId: props.PackId})}}\r\n                else {Handler = () => {if (onclick) onclick({\r\n                    card: {_id:props.cardId},packId:props.PackId})}}\r\n                return <button onClick={Handler}>{i.name}</button>\r\n            })}\r\n        </div>)\r\n}\r\ntype columnsNamePropsType = {\r\n    Content: Array<any>\r\n}\r\n\r\nfunction ColumnsName(props: columnsNamePropsType) {\r\n    return (<div className={style.Content}>\r\n        {props.Content.map((i: any) => {\r\n            return <div style={{width:`calc(90vw/${props.Content.length})`}}>{i}</div>\r\n        })}\r\n    </div>)\r\n}\r\n\r\ntype RowContentPropsType = {\r\n    Data: Array<CardType> | null\r\n    buttonsData: any\r\n}\r\nfunction RowContent(props: RowContentPropsType) {\r\n    return (<>\r\n        {props.Data === null ? <div>Загрузка</div> :\r\n            props.Data.map((i) => {\r\n                return <ColumnsName\r\n                    Content={[i.question, i.answer, i.grade, i.updated,\"url\",\r\n                        <Buttons cardId={i._id} PackId={i.cardsPack_id} buttonsData={props.buttonsData}/>]}/>\r\n            })}\r\n    </>)\r\n}\r\n\r\n\r\ntype TablePropsType = {\r\n    columnsName: Array<any>\r\n    rowContent: Array<CardType> | null\r\n    buttonsData: Array<ButtonType>\r\n}\r\nfunction TableForCards(props: TablePropsType) {\r\n    return (\r\n        <div className={style.Table}>\r\n            <div className={style.HeaderTable}>\r\n                <ColumnsName Content={props.columnsName}/>\r\n            </div>\r\n            <div className={style.ContentTable}>\r\n                <RowContent Data={props.rowContent} buttonsData={props.buttonsData}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default TableForCards;\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addCardTC, CardType, deleteCardTC, getCardsTC, updateCardTC} from \"../../../main/m2-bll/table-reduser\";\r\nimport {Redirect, useParams} from 'react-router-dom'\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport TableForCards from \"./TableCards\";\r\nimport {isInitializedTC} from \"../../../main/m2-bll/profile-reducer\";\r\nimport {DeleteCardDataType, UpdateCardDataType} from \"../../../main/m3-dal/tableApi\";\r\n\r\n\r\nfunction CardPage() {\r\n    const dispatch = useDispatch();\r\n    const {id} = useParams()\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoginIn);\r\n    const CardsData = useSelector<AppRootStateType, Array<CardType> | null>(state => state.table.cards);\r\n    const checkAuth = (isLoginIn: boolean) => {\r\n        if (isLoginIn === false) {\r\n            dispatch(isInitializedTC)\r\n            if (isLoginIn === false) {\r\n                return <Redirect exact to={'/login'}/>\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        checkAuth(isLoginIn)\r\n        dispatch(getCardsTC({cardsPack_id: id}))\r\n    }, [])\r\n    const addButton = () => {\r\n        dispatch(addCardTC({card: {cardsPack_id: id}}))\r\n    }\r\n    const updateButton = (data: UpdateCardDataType) => {\r\n        dispatch(updateCardTC(data))\r\n    }\r\n    const deleteButton = (data: DeleteCardDataType) => {\r\n        dispatch(deleteCardTC(data))\r\n    }\r\n    return <div>\r\n        {!CardsData ? <div>Загрузка</div> : <div>\r\n            <TableForCards columnsName={[\"question\", \"answer\", \"Grade\", \"updated\", \"url\",\r\n                <button onClick={addButton}>Add</button>]}\r\n                           rowContent={CardsData}\r\n                           buttonsData={[\r\n                               {name: \"Update\", onClick: updateButton},\r\n                               {name: \"Delete\", onClick: deleteButton}]}/>\r\n            <div>паГинация</div>\r\n        </div>}\r\n    </div>\r\n}\r\n\r\n\r\nexport default CardPage;","import React from \"react\";\r\nimport CardPage from \"../../../features/f2-table/a2-TableOfCards/CardsPage\";\r\n\r\n\r\nfunction CardsPage() {\r\n\r\n    return <CardPage/>\r\n}\r\n\r\nexport default CardsPage;","import style from \"./css.module.css\";\r\nimport React from \"react\";\r\nimport {PackType} from \"../../../main/m2-bll/table-reduser\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    onClick?: (data:any) => any\r\n}\r\ntype columnsNamePropsType = {\r\n    Content: Array<any>\r\n}\r\ntype RowContentPropsType = {\r\n    Data: Array<PackType> | null\r\n    buttonsData: Array<ButtonType>\r\n}\r\ntype ButtonsPropsType = {\r\n    buttonsData: Array<ButtonType>\r\n    id: string\r\n}\r\ntype TablePropsType = {\r\n    columnsName: Array<any>\r\n    rowContent: Array<PackType> | null\r\n    buttonsData: Array<ButtonType>\r\n}\r\nfunction Buttons(props: ButtonsPropsType) {\r\n    return (\r\n        <div>\r\n            {props.buttonsData.map((i) => {\r\n                let onclick = i.onClick\r\n                function Handler(){if (onclick) onclick(props.id)}\r\n                return <button onClick={Handler}>{i.name}</button>\r\n            })}\r\n        </div>)\r\n}\r\n\r\nfunction ColumnsName(props: columnsNamePropsType) {\r\n    return (<div className={style.Content}>\r\n        {props.Content.map((e: any) => {\r\n            return <div style={{width:`calc(90vw/${props.Content.length})`,\r\n            height:`calc(70vh/25)`}}>{e}</div>\r\n        })}\r\n    </div>)\r\n}\r\n\r\nfunction RowContent(props: RowContentPropsType) {\r\n    return (<>\r\n        {props.Data === null ? <div>Загрузка</div> :\r\n            props.Data.map((i) => {\r\n                return <ColumnsName\r\n                    Content={[i.name, i.cardsCount, i.updated, \"\", <Buttons id={i._id} buttonsData={props.buttonsData}/>]}/>\r\n            })}\r\n    </>)\r\n}\r\n\r\n\r\nfunction TableForPacks(props: TablePropsType) {\r\n    return (\r\n        <div className={style.Table}>\r\n            <div className={style.HeaderTable}>\r\n                <ColumnsName Content={props.columnsName}/>\r\n            </div>\r\n            <div className={style.ContentTable}>\r\n                <RowContent Data={props.rowContent} buttonsData={props.buttonsData}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TableForPacks;","import React, {useState} from \"react\";\r\nimport style from \"./css.module.css\";\r\nimport { setStartPagePaginatorActionType } from \"../../../m2-bll/table-reduser\";\r\n\r\ntype PaginatorPropsType ={\r\n    maxPages: number\r\n    startValue: number\r\n    endValue:number\r\n    goStart : () => void\r\n    goFinish : () => void\r\n    goPage : (value:number) => void\r\n}\r\nconst Paginator = (props:PaginatorPropsType) => {\r\n\r\n    // const [endValue,SetEndValue] = useState<number>(5)\r\n    // const [startValue,SetStartValue] = useState(1)\r\n    // for ( startValue; startValue <= maxPages; ()=> SetStartValue(startValue+1) ) {\r\n    //      buttons[startValue] = startValue\r\n    //  ПОЧЕМУ НЕ РАБОАТЕТ ??? фААААААА}\r\n    let i =props.startValue\r\n    let buttons: Array<any> = []\r\n    for ( i;i <= props.maxPages;i++ ) {\r\n    buttons[i] = i}\r\n    return (\r\n        <div className={style.Main}>\r\n        <div className={style.Pagination}>\r\n            <button onClick={props.goStart}>Start</button>\r\n            {buttons.map((b)=>{\r\n                let goPage = props.goPage\r\n                function Handler(){goPage(b)}\r\n                if (b <= props.endValue) return <button onClick={Handler}>{b}</button>\r\n            })}\r\n            <button onClick={props.goFinish}>End</button>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React, {useEffect} from \"react\";\r\nimport style from \"./css.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {isInitializedTC} from \"../../../main/m2-bll/profile-reducer\";\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport {\r\n    addPackTC,\r\n    deletePackTC,\r\n    getPacksTC,\r\n    PackType,\r\n    PaginatorType,\r\n    setCurrentPagerAC, setEndPagePaginatorAC, setStartPagePaginatorAC,\r\n    updatePackTC\r\n} from \"../../../main/m2-bll/table-reduser\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\nimport TableForPacks from \"./TablePacks\";\r\nimport Paginator from \"../../../main/m1-ui/common/Paginator/Paginator\";\r\n\r\n\r\nfunction PackPage() {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoginIn);\r\n    const PacksData = useSelector<AppRootStateType, Array<PackType> | null>(state => state.table.packs);\r\n    const paginatorData = useSelector<AppRootStateType, PaginatorType>(state => state.table.paginator);\r\n    let maxPages = Math.ceil(paginatorData.packsCount / 25)\r\n    const checkAuth = (isLoginIn: boolean) => {\r\n        if (isLoginIn === false) {\r\n            dispatch(isInitializedTC)\r\n            if (isLoginIn === false) {\r\n                return <Redirect exact to={'/login'}/>\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        checkAuth(isLoginIn)\r\n        dispatch(getPacksTC(paginatorData.currentPage))\r\n    }, [])\r\n\r\n    const addButton = () => {\r\n        dispatch(addPackTC({cardsPack: {}}, paginatorData.currentPage))\r\n    }\r\n    const deleteButton = (id: string) => {\r\n        dispatch(deletePackTC(id, paginatorData.currentPage))\r\n    }\r\n    const updateButton = (id: string) => {\r\n        dispatch(updatePackTC({cardsPack: {_id: id}}, paginatorData.currentPage))\r\n    }\r\n    const cardsButton = (id: string) => {\r\n        history.push(`/Cards/${id}`)\r\n    }\r\n    const goStart = () => {\r\n        dispatch(setCurrentPagerAC(1))\r\n        setStartPagePaginatorAC(1)\r\n        setEndPagePaginatorAC(5)\r\n        dispatch(getPacksTC(paginatorData.currentPage))\r\n    }\r\n    const goFinish = () => {\r\n        dispatch(setCurrentPagerAC(maxPages))\r\n        dispatch(getPacksTC(paginatorData.currentPage))\r\n        setStartPagePaginatorAC(maxPages-4)\r\n        setEndPagePaginatorAC(maxPages)\r\n    }\r\n    const goPage = (value: number) => {\r\n        if(value === paginatorData.endPage){\r\n            setStartPagePaginatorAC(value)\r\n            setEndPagePaginatorAC(value+4)\r\n            dispatch(setCurrentPagerAC(value))\r\n            dispatch(getPacksTC(paginatorData.currentPage))\r\n            return\r\n        }\r\n        else if(value === paginatorData.startPage){\r\n            setStartPagePaginatorAC(value-4)\r\n            setEndPagePaginatorAC(value)\r\n            dispatch(setCurrentPagerAC(value))\r\n            dispatch(getPacksTC(paginatorData.currentPage))\r\n            return\r\n        }\r\n\r\n    }\r\n    return (<div className={style.Main}>\r\n            {!PacksData ? <div>Загрузка</div> :\r\n                <>\r\n                    <Paginator maxPages={maxPages}\r\n                               endValue={paginatorData.endPage}\r\n                               startValue={paginatorData.startPage}\r\n                               goFinish={goFinish}\r\n                               goPage={goPage}\r\n                               goStart={goStart}/>\r\n                    <TableForPacks\r\n                        columnsName={[\"Name\", \"cardsCount\", \"Updated\", \"Url\", <button onClick={addButton}>Add</button>]}\r\n                        rowContent={PacksData}\r\n                        buttonsData={[\r\n                            {name: \"Update\", onClick: updateButton},\r\n                            {name: \"Delete\", onClick: deleteButton},\r\n                            {name: \"Cards\", onClick: cardsButton},]}/>\r\n                </>}\r\n\r\n            <ErrorSnackbar/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default PackPage;","import React from \"react\";\r\nimport PackPage from \"../../../features/f2-table/a1-TableOfPacks/PacksPage\";\r\n\r\n\r\n\r\n\r\nfunction PacksPage() {\r\n\r\n    return <PackPage/>\r\n}\r\n\r\nexport default PacksPage;","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\r\nimport RegistrationPage from \"./pages/RegistrationPage\";\r\nimport PasswordResetPage from \"./pages/PasswordResetPage\";\r\nimport PasswordGenerationPage from \"./pages/PasswordGenerationPage\";\r\nimport ProfilePage from \"./pages/ProfilePage\";\r\nimport HeaderNavbar from \"./header/HeaderNavbar\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport CardsPage from \"./pages/CardsPage\";\r\nimport PacksPage from \"./pages/PacksPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <HeaderNavbar/>\r\n                <>\r\n                    <Switch>\r\n                        <Route path={\"/login\"} render={() => (<LoginPage/>)}/>\r\n                        <Route path=\"/registration\" render={() => (<RegistrationPage/>)}/>\r\n                        <Route path=\"/password-reset\" render={() => (<PasswordResetPage/>)}/>}\r\n                        <Route path=\"/password-generation/:id\" render={() => (<PasswordGenerationPage/>)}/>\r\n                        <Route path=\"/password-generation\"\r\n                               render={() => (<h1>We send to your mail link for password change. Use it!</h1>)}/>\r\n                        <Route path=\"/profile\" render={() => (<ProfilePage/>)}/>\r\n                        <Route path=\"/Cards/:id\" render={() => (<CardsPage/>)}/>\r\n                        <Route path=\"/Packs\" render={() => (<PacksPage/>)}/>\r\n                    </Switch>\r\n                </>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {passwordResetReducer} from \"./password-reset-reducer\";\r\nimport {passwordGenerationReducer} from \"./password-gereration-reducer\";\r\nimport {authReducer} from \"./login-reducer\";\r\nimport {ProfileReducer} from \"./profile-reducer\";\r\nimport {tableReducer} from \"./table-reduser\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    registrationPage: registrationReducer,\r\n    passwordResetPage: passwordResetReducer,\r\n    passwordGenerationPage: passwordGenerationReducer,\r\n    profilePage: ProfileReducer,\r\n    auth:authReducer,\r\n    table:tableReducer,\r\n\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main/m1-ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./main/m2-bll/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"headerNavbar_menu__1T5wg\",\"menu__link\":\"headerNavbar_menu__link__1JKf_\",\"menu__link_logout\":\"headerNavbar_menu__link_logout__2TVLw\",\"menu__list\":\"headerNavbar_menu__list__2PUd2\",\"menu__group\":\"headerNavbar_menu__group__3nCIy\",\"page\":\"headerNavbar_page__1a2cw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"css_Table__2UCbd\",\"HeaderTable\":\"css_HeaderTable__1Uo31\",\"ContentTable\":\"css_ContentTable__3bVwC\",\"Content\":\"css_Content__1-RRD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"css_Table__31v0b\",\"HeaderTable\":\"css_HeaderTable__1aD8H\",\"ContentTable\":\"css_ContentTable__2W9EF\",\"rowItem\":\"css_rowItem__1zkAn\",\"Content\":\"css_Content__th1Vj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"css_Main__3vS4j\",\"Pagination\":\"css_Pagination__2VPy5\"};"],"sourceRoot":""}
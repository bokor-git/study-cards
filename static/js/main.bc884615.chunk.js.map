{"version":3,"sources":["main/m2-bll/app-reducer.ts","main/m1-ui/utils/error-utils.ts","main/m3-dal/register-api.ts","main/m2-bll/registration-reducer.ts","features/f1-auth/a2-registration/RegistrationPage.tsx","main/m1-ui/pages/RegistrationPage.tsx","main/m1-ui/common/ErrorSnackbar/ErrorSnackbar.tsx","main/m1-ui/common/Preloader/Preloader.tsx","main/m3-dal/password-recovery-api.ts","main/m2-bll/password-reset-reducer.ts","features/f1-auth/a3-password_recovery/ResetPassword-New.tsx","main/m1-ui/pages/PasswordResetPage.tsx","main/m2-bll/password-gereration-reducer.ts","features/f1-auth/a3-password_recovery/GenerateNewPassword-New.tsx","main/m1-ui/pages/PasswordGenerationPage.tsx","main/m3-dal/login-api.ts","main/m2-bll/login-reducer.ts","main/m2-bll/profile-reducer.ts","main/m1-ui/pages/ProfilePage.tsx","main/m1-ui/header/HeaderNavbar.tsx","features/f1-auth/a1-login/LoginNew.tsx","main/m1-ui/pages/LoginPage.tsx","main/m1-ui/App.tsx","serviceWorker.ts","main/m2-bll/store.ts","index.tsx","features/f1-auth/a2-registration/css.module.css","main/m1-ui/header/headerNavbar.module.css"],"names":["initialState","setAppErrorAC","error","type","handleServerNetworkError","dispatch","response","data","message","status","instance","axios","create","baseURL","withCredentials","registrationApi","post","isRegistered","isLoading","setIsRegistratedAC","value","setIsLoadingAC","RegisterPage","useDispatch","useSelector","state","registrationPage","app","formik","useFormik","validate","values","email","password","initialValues","onSubmit","then","res","catch","setTimeout","registrationTC","to","className","style","registerPage","contentContainer","Container","title","handleSubmit","formgroup","formValue","id","name","placeholder","onChange","handleChange","htmlFor","preloader","preloader__image_animate","errors","errorMessage","errorText","RegistrationPage","Alert","props","elevation","variant","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Preloader","passwordRecoveryApi","newPasswordData","loading","setLoadingAC","Copyright","Typography","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","ResetPasswordNew","classes","passwordResetPage","from","alert","info","component","maxWidth","CssBaseline","Avatar","TextField","required","fullWidth","autoComplete","autoFocus","label","getFieldProps","Button","Box","mt","PasswordResetPage","GenerateNewPasswordNew","passwordGenerationPage","useParams","history","useHistory","push","setNewPasswordTC","resetPasswordToken","PasswordGenerationPage","authAPI","delete","isLoginIn","UserData","_id","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","setIsLoggedInAC","setUsersDataAC","Userdata","isInitialized","ProfilePage","auth","profilePage","useEffect","console","log","exact","src","alt","height","position","top","textAlign","CircularProgress","HeaderNavbar","location","useLocation","logoutHandler","useCallback","pathname","length","menu","menu__list","menu__group","onClick","menu__link_logout","menu__link","LoginNew","FormControlLabel","control","Checkbox","checked","Grid","container","item","xs","LoginPage","App","path","render","Boolean","window","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.bc884615.chunk.js","sourcesContent":["const initialState: InitialStateType = {\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType =  'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppInitializedAC = (isInitialized:  boolean) => ({ type: 'APP/SET-INITIALIZED', isInitialized } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppInitializedActionType\r\n\r\n\r\nexport type InitialStateType = any\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, SetAppErrorActionType, SetAppStatusActionType, setAppStatusAC} from '../../m2-bll/app-reducer'\r\n\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.response ? error.response.data.error : error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import axios from \"axios\"\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/2.0/\",\r\n    ...settings\r\n})\r\n\r\n// api\r\n\r\n\r\nexport const registrationApi = {\r\n    setRegister(data:RegistretionDataType) {\r\n        const promise = instance.post('auth/register',data );\r\n        return promise;\r\n    }\r\n}\r\n\r\n\r\nexport type RegistretionDataType = {\r\n    email: string\r\n    password: string\r\n}\r\n","import {handleServerNetworkError} from \"../m1-ui/utils/error-utils\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {registrationApi, RegistretionDataType} from \"../m3-dal/register-api\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isRegistered: false,\r\n    isLoading:false,\r\n}\r\n\r\nexport const registrationReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n\r\n        case 'SET-IS-REGISTATED':\r\n            return {...state, isRegistered: action.value}\r\n        case 'SET-IS-LOADING':\r\n            return {...state, isLoading: action.value}\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n// thunks\r\nexport const registrationTC = (data: RegistretionDataType) => (dispatch: ThunkDispatch) => {\r\n    registrationApi.setRegister(data)\r\n        .then(res => {\r\n            dispatch(setIsRegistratedAC(true))\r\n            dispatch(setIsLoadingAC(false))\r\n        }).catch((error) => {\r\n        dispatch(setIsLoadingAC(false))\r\n        handleServerNetworkError(error, dispatch);\r\n        setTimeout(() => dispatch(setAppErrorAC(null)), 3000);\r\n\r\n    })\r\n}\r\n\r\n\r\n// Action Creators\r\nexport const setIsRegistratedAC = (value: boolean): setIsRegistratedActionType =>\r\n    ({type: 'SET-IS-REGISTRATED', value} as const)\r\nexport const setIsLoadingAC = (value: boolean): setIsLoadingActionType =>\r\n    ({type: 'SET-IS-LOADING', value} as const)\r\n\r\n\r\n// Types\r\n\r\nexport type InitialStateType = any\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n\r\n\r\ntype ActionsType = setIsRegistratedActionType\r\n\r\nexport type setIsRegistratedActionType = {\r\n    type: string\r\n    value: boolean\r\n}\r\nexport type setIsLoadingActionType = {\r\n    type: string\r\n    value: boolean\r\n}\r\n\r\n","import React from \"react\";\r\nimport style from \"./css.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {registrationTC, setIsLoadingAC} from \"../../../main/m2-bll/registration-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nfunction RegisterPage() {\r\n\r\n    const dispatch = useDispatch();\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.registrationPage.isRegistered);\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.registrationPage.isLoading);\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Please enter your email'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Please enter your password'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        onSubmit: values => {\r\n            let data = {\r\n                email: values.email,\r\n                password: values.password\r\n            }\r\n            dispatch(setIsLoadingAC(true))\r\n            dispatch(registrationTC(data))\r\n        },\r\n    });\r\n\r\n    if (isRegistered === true) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.registerPage}>\r\n            <div className={style.contentContainer}>\r\n                <div className={style.Container}>\r\n                    <div className={style.title}><h1>Registration Page</h1></div>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <div className={style.formgroup}>\r\n                            <input\r\n                                className={style.formValue}\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your Email\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.email}/>\r\n                            <label htmlFor={\"email\"}>Email</label>\r\n                        </div>\r\n                        <div className={style.formgroup}>\r\n                            <input\r\n                                className={style.formValue}\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                placeholder=\"Enter your password\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.password}/>\r\n                            <label htmlFor={\"password\"}>Password</label>\r\n                            {/*{formik.errors.password ?*/}\r\n                            {/*    <div className={style.error}>{formik.errors.password}</div> : null}*/}\r\n                        </div>\r\n                            <button>Регистрация</button>\r\n                        { isLoading === true ?\r\n                            <div className={style.preloader}>\r\n                            <div className={style.preloader__image_animate}></div>\r\n                            </div> :\r\n                            <span></span>}\r\n                        {formik.errors.password ?<div className={style.errorMessage}><div className={style.errorText}>Password<br/> incorrect</div></div>: null}\r\n                        {formik.errors.email ?<div className={style.errorMessage}><div className={style.errorText}>Email<br/> incorrect</div></div>: null}\r\n                        {error ?<div className={style.errorMessage}><div className={style.errorText}>{error}</div></div>: null}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )}\r\n\r\nexport default RegisterPage;","import React from \"react\";\r\nimport RegisterPage from \"../../../features/f1-auth/a2-registration/RegistrationPage\";\r\n\r\n\r\nfunction RegistrationPage() {\r\n    return (\r\n        <RegisterPage/>\r\n    );\r\n}\r\n\r\nexport default RegistrationPage;","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {setAppErrorAC} from \"../../../m2-bll/app-reducer\";\r\n\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = !!error ;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./preloader.scss\"\r\nexport function Preloader() {\r\nreturn <div className='cssload-loader'>\r\n    <div className='cssload-inner cssload-one'></div>\r\n    <div className='cssload-inner cssload-two'></div>\r\n    <div className='cssload-inner cssload-three'></div>\r\n</div>\r\n\r\n}","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n})\r\n\r\n// api\r\nexport const passwordRecoveryApi = {\r\n    forgot(data:dataType) {\r\n        const promise = instance.post('/auth/forgot',data );\r\n        return promise;\r\n    },\r\n    setNewPassword(newPasswordData:newPasswordDataType) {\r\n        const promise = instance.post('/auth/set-new-password',newPasswordData);\r\n        return promise;\r\n    }\r\n}\r\n\r\nexport type dataType = {\r\n    email: string\r\n    from: string\r\n    message: any\r\n}\r\nexport type newPasswordDataType = {\r\n    password:string\r\n    resetPasswordToken:string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {passwordRecoveryApi} from \"../m3-dal/password-recovery-api\";\r\n\r\nconst initialState: InitialStateType = {\r\n    loading: false,\r\n    response: null\r\n}\r\n\r\nexport const passwordResetReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return {...state, loading: action.loading}\r\n        case \"SET-PASS-RESET-RESPONSE\":\r\n            return {...state, response: action.response}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const setLoadingAC = (loading: boolean) => ({type: 'LOADING', loading} as const)\r\nexport const setResponseAC = (response: ResponseType) => ({type: 'SET-PASS-RESET-RESPONSE', response} as const)\r\n\r\nexport const resetPasswordTC = (email: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setLoadingAC(true))\r\n    let data = {\r\n        email: email,\r\n        from: \"test-front-admin\",\r\n        message: `<div style = \"background-color: lime; padding: 15px\">\r\n            password recovery link:\r\n    <a href='http://localhost:3000/study-cards#/password-generation/$token$'>link</a>\r\n    </div>`\r\n    }\r\n    passwordRecoveryApi.forgot(data).then((res: any) => {\r\n        if (res.status === 200) {\r\n            dispatch(setResponseAC(res.data))\r\n            dispatch(setLoadingAC(false))\r\n            alert(res.data.info)\r\n        }\r\n    }).catch(reason => {\r\n        alert(reason)\r\n        dispatch(setLoadingAC(false))\r\n    })\r\n}\r\n\r\n\r\nexport type setLoadingACType = ReturnType<typeof setLoadingAC>\r\nexport type setResponseACType = ReturnType<typeof setResponseAC>\r\nexport type InitialStateType = {\r\n    loading: boolean,\r\n    response: null|ResponseType\r\n}\r\ntype ActionsType =\r\n    | setLoadingACType\r\n    | setResponseACType\r\n\r\n\r\ntype ResponseType = {\r\n    info: string\r\n    success: boolean\r\n    answer: boolean\r\n    html: boolean\r\n}","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nimport {Preloader} from \"../../../main/m1-ui/common/Preloader/Preloader\";\r\nimport {resetPasswordTC} from \"../../../main/m2-bll/password-reset-reducer\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function ResetPasswordNew() {\r\n    const classes = useStyles();\r\n    let dispatch = useDispatch()\r\n    let loading = useSelector<AppRootStateType, boolean>(state => state.passwordResetPage.loading)\r\n\r\n\r\n    const formik = useFormik({\r\n        validate:(values)=>{\r\n            if (!values.email){\r\n                return {\r\n                    email: 'Please enter your new email'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email:'',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(resetPasswordTC(values.email));\r\n        },\r\n    });\r\n\r\n\r\n    return (loading ? <Preloader/> :\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Email for password recovery\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                   Send\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport ResetPassword from \"../../../features/f1-auth/a3-password_recovery/ResetPassword\";\r\nimport ResetPasswordNew from \"../../../features/f1-auth/a3-password_recovery/ResetPassword-New\";\r\n\r\n\r\nfunction PasswordResetPage() {\r\n    return <ResetPasswordNew/>\r\n}\r\n\r\nexport default PasswordResetPage;","import {Dispatch} from \"redux\";\r\nimport {passwordRecoveryApi, newPasswordDataType} from \"../m3-dal/password-recovery-api\";\r\nimport {setLoadingAC, setLoadingACType} from \"./password-reset-reducer\";\r\n\r\n\r\nconst initialState:InitialStateType =\r\n    {\r\n        loading: false,\r\n        response: null\r\n    }\r\nexport const passwordGenerationReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return {...state, loading: action.loading}\r\n        case \"SET-PASS-GENERATION-RESPONSE\":\r\n            return {...state, response: action.response}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setPassGenerationResponseAC = (response: { info: string }) => ({\r\n    type: \"SET-PASS-GENERATION-RESPONSE\",\r\n    response\r\n} as const)\r\n\r\n\r\nexport const setNewPasswordTC = (newPasswordData: newPasswordDataType, history:any) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setLoadingAC(true))\r\n    passwordRecoveryApi.setNewPassword(newPasswordData).then((res: any) => {\r\n        if (res.status === 200) {\r\n            dispatch(setPassGenerationResponseAC(res.data))\r\n            dispatch(setLoadingAC(false))\r\n            alert(res.data.info)\r\n            history.push('/login/')\r\n        }\r\n    }).catch(reason => {\r\n        alert(reason)\r\n        dispatch(setLoadingAC(false))\r\n    })\r\n}\r\n\r\nexport type setPassGenerationResponseACType = ReturnType<typeof setPassGenerationResponseAC>\r\nexport type InitialStateType =    {\r\n    loading: boolean\r\n    response: { info: string } | null\r\n}\r\ntype ActionsType =\r\n    | setLoadingACType\r\n    | setPassGenerationResponseACType","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport {InitialStateType, setNewPasswordTC} from \"../../../main/m2-bll/password-gereration-reducer\";\r\nimport {Preloader} from \"../../../main/m1-ui/common/Preloader/Preloader\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function GenerateNewPasswordNew() {\r\n    let state = useSelector<AppRootStateType, InitialStateType>(state => state.passwordGenerationPage)\r\n\r\n    const classes = useStyles();\r\n    const {id} = useParams();\r\n    const history = useHistory()\r\n    let dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        validate:(values)=>{\r\n            if (!values.password){\r\n                return {\r\n                    password: 'Please enter your new password'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            password:'',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setNewPasswordTC({password: values.password, resetPasswordToken: id}, history));\r\n        },\r\n    });\r\n\r\n\r\n    return (state.loading ? <Preloader/> :\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    New password\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"New password\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Set new password\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport GenerateNewPassword from \"../../../features/f1-auth/a3-password_recovery/GenerateNewPassword\";\r\nimport GenerateNewPasswordNew from \"../../../features/f1-auth/a3-password_recovery/GenerateNewPassword-New\";\r\n\r\nfunction PasswordGenerationPage() {\r\n    return <GenerateNewPasswordNew/>\r\n}\r\n\r\nexport default PasswordGenerationPage;","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/2.0/\",\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout(){\r\n        const promise = instance.delete('auth/me');\r\n        return promise;\r\n    },\r\n    authMe() {\r\n        return instance.post('auth/me',{});\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n\r\n    rememberMe: boolean\r\n    _id?: string;\r\n    email: string;\r\n    name?: string;\r\n    avatar?: string;\r\n    publicCardPacksCount?: number; // количество колод\r\n\r\n    created?: Date;\r\n    updated?: Date;\r\n    isAdmin?: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    error?: string;\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../m3-dal/login-api\";\r\nimport {handleServerNetworkError} from \"../m1-ui/utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoginIn: false,\r\n    UserData: {\r\n        _id: '0',\r\n        email: '',\r\n        name: '',\r\n        publicCardPacksCount: 0, // количество колод\r\n        created: new Date(),\r\n        updated: new Date(),\r\n        isAdmin: false,\r\n        verified: false, // подтвердил ли почту\r\n        rememberMe: false,\r\n        error: ''\r\n\r\n    }\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'SET-IS-LOGIN-IN':\r\n            return {...state, isLoginIn: action.value}\r\n        case 'SET-IS-LOGOUT-IN':\r\n            return {...state, isLoginIn: action.value}\r\n        case 'SET-USER-DATA-IN':\r\n            return {...state, UserData: action.Userdata}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'SET-IS-LOGIN-IN', value} as const)\r\nexport const setUsersDataAC = (Userdata: LoginParamsType) =>\r\n    ({type: 'SET-USER-DATA-IN', Userdata} as const)\r\nexport const setIsLogoutInAC = (value: boolean) =>\r\n    ({type: 'SET-IS-LOGOUT-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch) => {\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setUsersDataAC(res.data))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(false))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n    })\r\n}\r\n\r\n// types\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setUsersDataAC>\r\n    | ReturnType<typeof setIsLogoutInAC>\r\ntype InitialStateType = {\r\n    isLoginIn: boolean,\r\n    UserData: LoginParamsType\r\n}\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {authAPI} from \"../m3-dal/login-api\";\r\nimport {setIsLoggedInAC, setUsersDataAC} from \"./login-reducer\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const ProfileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case'SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'SET-INITIALIZED', isInitialized} as const)\r\n\r\n\r\n// thunks\r\nexport const isInitializedTC = () => (dispatch: ThunkDispatch) => {\r\n    authAPI.authMe().then(res => {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setInitializedAC(true))\r\n        dispatch(setUsersDataAC(res.data))\r\n    })\r\n        .catch(error => console.log(error))\r\n}\r\n\r\n// types\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setInitializedAC>\r\n    | ReturnType<typeof setUsersDataAC>\r\ntype InitialStateType = {\r\n    isInitialized: boolean,\r\n\r\n}\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {isInitializedTC} from \"../../m2-bll/profile-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nfunction ProfilePage() {\r\n\r\n    const {name,avatar,email} = useSelector((state:AppRootStateType)=> state.auth.UserData)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.profilePage.isInitialized)\r\n    const dispatch = useDispatch();\r\n    const isLoginIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoginIn);\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(isInitializedTC());\r\n    },[])\r\n    if(isLoginIn === false){\r\n        return <Redirect exact to={'/login'}/>\r\n    }\r\n    if(!isInitialized){\r\n        return <div style={{position: 'fixed',top:'30%',textAlign:'center',width:'100%'}}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Name:{name}</h1>\r\n            <img src={avatar} alt=\"\" style={{width:'100px', height:'100px'}}/>\r\n            <div>E-mail: {email}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfilePage;","import React, {useCallback} from \"react\";\r\nimport style from \"./headerNavbar.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logoutTC} from \"../../m2-bll/login-reducer\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {useLocation} from \"react-router\";\r\n\r\nfunction HeaderNavbar() {\r\n    const location = useLocation()\r\n    const dispatch = useDispatch();\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoginIn);\r\n\r\n    if (isLoginIn === false && location.pathname.length!== 57) {\r\n        return <Redirect exact to={'/login'}/>\r\n    }\r\n    return (\r\n            <nav className={style.menu}>\r\n                <ul className={style.menu__list}>\r\n                    {isLoginIn && <li className={style.menu__group}>\r\n                        <button onClick={logoutHandler} className={style.menu__link_logout}>Log out</button>\r\n                    </li>}\r\n                    <li className={style.menu__group}><NavLink className={style.menu__link}\r\n                                                         to=\"/registration\">registration</NavLink></li>\r\n                    <li className={style.menu__group}><NavLink className={style.menu__link} to=\"/password-reset\">password\r\n                        reset</NavLink></li>\r\n                    <li className={style.menu__group}><NavLink className={style.menu__link} to=\"/password-generation\">password\r\n                        generation</NavLink></li>\r\n                    <li className={style.menu__group}><NavLink className={style.menu__link} to=\"/profile\">profile</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default HeaderNavbar;\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../../main/m2-bll/login-reducer\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {FormGroup} from \"@material-ui/core\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function LoginNew() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const isLoginIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoginIn);\r\n\r\n    const formik = useFormik({\r\n        validate:(values)=>{\r\n            if (!values.email){\r\n                return {\r\n                    email:'Please enter your email'\r\n                }\r\n            }\r\n            if (!values.password){\r\n                return {\r\n                    password: 'Please enter your password'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password:'',\r\n            rememberMe: false,\r\n            verified:false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    });\r\n\r\n    if(isLoginIn === true){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox color={\"primary\"}/>}\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                        checked={formik.values.rememberMe}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <NavLink to={\"/password-reset\"} >\r\n                                Forgot password?\r\n                            </NavLink>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <NavLink to={\"/registration\"}>\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </NavLink>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport Login from \"../../../features/f1-auth/a1-login/Login\";\r\nimport LoginNew from \"../../../features/f1-auth/a1-login/LoginNew\";\r\n\r\n\r\nfunction LoginPage() {\r\n\r\n    return <LoginNew/>\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\r\nimport RegistrationPage from \"./pages/RegistrationPage\";\r\nimport PasswordResetPage from \"./pages/PasswordResetPage\";\r\nimport PasswordGenerationPage from \"./pages/PasswordGenerationPage\";\r\nimport ProfilePage from \"./pages/ProfilePage\";\r\nimport HeaderNavbar from \"./header/HeaderNavbar\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <HeaderNavbar/>\r\n                <>\r\n                    <Switch>\r\n                        <Route path={\"/login\"} render={() => (<LoginPage/>)}/>\r\n                        <Route path=\"/registration\" render={() => (<RegistrationPage/>)}/>\r\n                        <Route path=\"/password-reset\" render={() => (<PasswordResetPage/>)}/>}\r\n                        <Route path=\"/password-generation/:id\" render={() => (<PasswordGenerationPage/>)}/>\r\n                        <Route path=\"/password-generation\"\r\n                               render={() => (<h1>We send to your mail link for password change. Use it!</h1>)}/>\r\n                        <Route path=\"/profile\" render={() => (<ProfilePage/>)}/>\r\n                    </Switch>\r\n                </>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {passwordResetReducer} from \"./password-reset-reducer\";\r\nimport {passwordGenerationReducer} from \"./password-gereration-reducer\";\r\nimport {authReducer} from \"./login-reducer\";\r\nimport {ProfileReducer} from \"./profile-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    registrationPage: registrationReducer,\r\n    passwordResetPage: passwordResetReducer,\r\n    passwordGenerationPage: passwordGenerationReducer,\r\n    profilePage: ProfileReducer,\r\n    auth:authReducer,\r\n\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./main/m2-bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerPage\":\"css_registerPage__uyYNX\",\"preloader\":\"css_preloader__3kW8o\",\"preloader__image_animate\":\"css_preloader__image_animate__38Wik\",\"up-down\":\"css_up-down__3tu4p\",\"contentContainer\":\"css_contentContainer__1wsFb\",\"Container\":\"css_Container__o3flk\",\"input\":\"css_input__3GujL\",\"title\":\"css_title__2v9sB\",\"formgroup\":\"css_formgroup__3odNB\",\"buttonRegister\":\"css_buttonRegister__2HfVU\",\"errorMessage\":\"css_errorMessage__3n8JL\",\"errorText\":\"css_errorText__2_KYH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"headerNavbar_menu__1T5wg\",\"menu__link\":\"headerNavbar_menu__link__1JKf_\",\"menu__link_logout\":\"headerNavbar_menu__link_logout__2TVLw\",\"menu__list\":\"headerNavbar_menu__list__2PUd2\",\"menu__group\":\"headerNavbar_menu__group__3nCIy\",\"page\":\"headerNavbar_page__1a2cw\"};"],"sourceRoot":""}
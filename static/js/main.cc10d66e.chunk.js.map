{"version":3,"sources":["main/m1-ui/pages/RegistrationPage.tsx","main/m1-ui/common/Input/Input.tsx","main/m1-ui/common/Button/Button.tsx","main/m1-ui/common/Preloader/Preloader.tsx","main/m3-dal/password-recovery-api.ts","main/m2-bll/password-reset-reducer.ts","features/f1-auth/a3-password_recovery/ResetPassword.tsx","main/m1-ui/pages/PasswordResetPage.tsx","main/m2-bll/password-gereration-reducer.ts","features/f1-auth/a3-password_recovery/GenerateNewPassword.tsx","main/m1-ui/pages/PasswordGenerationPage.tsx","main/m3-dal/login-api.ts","main/m2-bll/app-reducer.ts","main/m1-ui/utils/error-utils.ts","main/m2-bll/login-reducer.ts","main/m2-bll/profile-reducer.ts","main/m1-ui/pages/ProfilePage.tsx","main/m1-ui/header/HeaderNavbar.tsx","main/m1-ui/common/ErrorSnackbar/ErrorSnackbar.tsx","features/f1-auth/a1-login/LoginNew.tsx","main/m1-ui/pages/LoginPage.tsx","main/m1-ui/App.tsx","serviceWorker.ts","main/m2-bll/store.ts","main/m2-bll/registration-reducer.ts","index.tsx","main/m1-ui/header/headerNavbar.module.css","main/m1-ui/common/Input/input.module.css"],"names":["RegistrationPage","Input","onChange","onEnterPress","value","error","placeholder","onBlur","className","style","group","autoFocus","color","onKeyPress","e","charCode","currentTarget","type","bar","Button","onClick","text","disabled","Preloader","instance","axios","create","baseURL","passwordRecoveryApi","data","post","newPasswordData","initialState","loading","response","setLoadingAC","ResetPassword","dispatch","useDispatch","useSelector","state","passwordResetPage","useState","email","setEmail","from","message","then","res","status","alert","info","catch","reason","resetPasswordTC","PasswordResetPage","GenerateNewPassword","id","useParams","history","useHistory","passwordGenerationPage","password","setPassword","push","setNewPasswordTC","resetPasswordToken","PasswordGenerationPage","withCredentials","authAPI","delete","setAppErrorAC","handleServerNetworkError","isLoginIn","UserData","_id","name","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","setIsLoggedInAC","setUsersDataAC","Userdata","isInitialized","ProfilePage","auth","avatar","profilePage","useEffect","console","log","exact","to","src","alt","width","height","position","top","textAlign","CircularProgress","HeaderNavbar","location","useLocation","logoutHandler","useCallback","pathname","length","menu","menu__list","menu__group","menu__link_logout","menu__link","Alert","props","elevation","variant","ErrorSnackbar","app","handleClose","event","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Copyright","Typography","align","Link","href","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","margin","backgroundColor","palette","secondary","main","form","submit","LoginNew","classes","formik","useFormik","validate","values","initialValues","onSubmit","Container","component","maxWidth","CssBaseline","Avatar","handleSubmit","TextField","required","fullWidth","autoComplete","label","getFieldProps","errors","FormControlLabel","control","Checkbox","checked","Grid","container","item","xs","Box","mt","LoginPage","App","path","render","Boolean","window","hostname","match","rootReducer","combineReducers","action","registrationPage","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cc10d66e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction RegistrationPage() {\r\n    return (\r\n        <div>\r\n            <h1>Registration Page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegistrationPage;","import React from \"react\";\r\nimport style from \"./input.module.css\"\r\n\r\ntype MyInputType = {\r\n    onChange: (e:string) =>void\r\n    onEnterPress?:(e:string)=>void\r\n    error:boolean\r\n    value:string\r\n    placeholder:string\r\n    onBlur?: ()=>void\r\n}\r\n\r\nexport function Input({onChange,onEnterPress, value, error, placeholder, onBlur}: MyInputType) {\r\n    const enterEvent = (e: any) => {\r\n        if (e.charCode === 13&&onEnterPress) {\r\n            onEnterPress((e.currentTarget.value))\r\n        }\r\n    }\r\n    return <div className={style.group}>\r\n        <input autoFocus={true} onBlur={onBlur}  style={error?{color:\"red\"}:{}} value={value} onKeyPress={enterEvent} placeholder={placeholder} type=\"text\" onChange={(e => onChange(e.currentTarget.value))}/>\r\n        <span className={style.bar}></span>\r\n    </div>\r\n\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./button.scss\"\r\n\r\ntype MyButtonType = {\r\n    onClick: () =>void\r\n    text :string\r\n    disabled?:boolean\r\n}\r\n\r\nexport function Button({onClick, text, disabled}: MyButtonType) {\r\n    return <div>\r\n        <button disabled={disabled} className=\"btn paper paper-raise-flatten\" onClick={onClick}>{text}</button>\r\n    </div>\r\n\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./preloader.scss\"\r\nexport function Preloader() {\r\nreturn <div className='cssload-loader'>\r\n    <div className='cssload-inner cssload-one'></div>\r\n    <div className='cssload-inner cssload-two'></div>\r\n    <div className='cssload-inner cssload-three'></div>\r\n</div>\r\n\r\n}","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n})\r\n\r\n// api\r\nexport const passwordRecoveryApi = {\r\n    forgot(data:dataType) {\r\n        const promise = instance.post('/auth/forgot',data );\r\n        return promise;\r\n    },\r\n    setNewPassword(newPasswordData:newPasswordDataType) {\r\n        const promise = instance.post('/auth/set-new-password',newPasswordData);\r\n        return promise;\r\n    }\r\n}\r\n\r\nexport type dataType = {\r\n    email: string\r\n    from: string\r\n    message: any\r\n}\r\nexport type newPasswordDataType = {\r\n    password:string\r\n    resetPasswordToken:string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {passwordRecoveryApi} from \"../m3-dal/password-recovery-api\";\r\n\r\nconst initialState: InitialStateType = {\r\n    loading: false,\r\n    response: null\r\n}\r\n\r\nexport const passwordResetReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return {...state, loading: action.loading}\r\n        case \"SET-PASS-RESET-RESPONSE\":\r\n            return {...state, response: action.response}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const setLoadingAC = (loading: boolean) => ({type: 'LOADING', loading} as const)\r\nexport const setResponseAC = (response: ResponseType) => ({type: 'SET-PASS-RESET-RESPONSE', response} as const)\r\n\r\nexport const resetPasswordTC = (email: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setLoadingAC(true))\r\n    let data = {\r\n        email: email,\r\n        from: \"test-front-admin\",\r\n        message: `<div style = \"background-color: lime; padding: 15px\">\r\n            password recovery link:\r\n    <a href='http://localhost:3000/study-cards#/password-generation/$token$'>link</a>\r\n    </div>`\r\n    }\r\n    passwordRecoveryApi.forgot(data).then((res: any) => {\r\n        if (res.status === 200) {\r\n            dispatch(setResponseAC(res.data))\r\n            dispatch(setLoadingAC(false))\r\n            alert(res.data.info)\r\n        }\r\n    }).catch(reason => {\r\n        alert(reason)\r\n        dispatch(setLoadingAC(false))\r\n    })\r\n}\r\n\r\n\r\nexport type setLoadingACType = ReturnType<typeof setLoadingAC>\r\nexport type setResponseACType = ReturnType<typeof setResponseAC>\r\nexport type InitialStateType = {\r\n    loading: boolean,\r\n    response: null|ResponseType\r\n}\r\ntype ActionsType =\r\n    | setLoadingACType\r\n    | setResponseACType\r\n\r\n\r\ntype ResponseType = {\r\n    info: string\r\n    success: boolean\r\n    answer: boolean\r\n    html: boolean\r\n}","import React, {useState} from \"react\";\r\nimport {Input} from \"./../../../main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"./../../../main/m1-ui/common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Preloader} from \"./../../../main/m1-ui/common/Preloader/Preloader\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {resetPasswordTC} from \"../../../main/m2-bll/password-reset-reducer\";\r\n\r\n\r\nfunction ResetPassword() {\r\n\r\n    let dispatch = useDispatch()\r\n    let loading = useSelector<AppRootStateType, boolean>(state => state.passwordResetPage.loading)\r\n\r\n\r\n    let [email, setEmail] = useState<string>(\"\")\r\n\r\n    const resetPass = () => {dispatch(resetPasswordTC(email)); setEmail(\"\")}\r\n    const onInputChange = (value: string) => setEmail(value)\r\n\r\n    return (loading ? <Preloader/> :\r\n            <div>\r\n                <h1>Password Reset Page</h1>\r\n                <div>Email for reset:</div>\r\n                <Input onChange={onInputChange} error={false} value={email} placeholder={\"Please set email\"}/>\r\n                <Button onClick={resetPass} text={\"Reset password\"}/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default ResetPassword;","import React from \"react\";\r\nimport ResetPassword from \"../../../features/f1-auth/a3-password_recovery/ResetPassword\";\r\n\r\n\r\nfunction PasswordResetPage() {\r\n    return <ResetPassword/>\r\n}\r\n\r\nexport default PasswordResetPage;","import {Dispatch} from \"redux\";\r\nimport {passwordRecoveryApi, newPasswordDataType} from \"../m3-dal/password-recovery-api\";\r\nimport {setLoadingAC, setLoadingACType} from \"./password-reset-reducer\";\r\n\r\n\r\nconst initialState:InitialStateType =\r\n    {\r\n        loading: false,\r\n        response: null\r\n    }\r\nexport const passwordGenerationReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return {...state, loading: action.loading}\r\n        case \"SET-PASS-GENERATION-RESPONSE\":\r\n            return {...state, response: action.response}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setPassGenerationResponseAC = (response: { info: string }) => ({\r\n    type: \"SET-PASS-GENERATION-RESPONSE\",\r\n    response\r\n} as const)\r\n\r\n\r\nexport const setNewPasswordTC = (newPasswordData: newPasswordDataType, history:any) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setLoadingAC(true))\r\n    passwordRecoveryApi.setNewPassword(newPasswordData).then((res: any) => {\r\n        if (res.status === 200) {\r\n            dispatch(setPassGenerationResponseAC(res.data))\r\n            dispatch(setLoadingAC(false))\r\n            alert(res.data.info)\r\n            history.push('/login/')\r\n        }\r\n    }).catch(reason => {\r\n        alert(reason)\r\n        dispatch(setLoadingAC(false))\r\n    })\r\n}\r\n\r\nexport type setPassGenerationResponseACType = ReturnType<typeof setPassGenerationResponseAC>\r\nexport type InitialStateType =    {\r\n    loading: boolean\r\n    response: { info: string } | null\r\n}\r\ntype ActionsType =\r\n    | setLoadingACType\r\n    | setPassGenerationResponseACType","import React, { useState} from \"react\";\r\nimport {Input} from \"../../../main/m1-ui/common/Input/Input\";\r\nimport {Button} from \"../../../main/m1-ui/common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialStateType, setNewPasswordTC} from \"../../../main/m2-bll/password-gereration-reducer\";\r\nimport {useParams, Redirect, useHistory} from \"react-router\"\r\nimport {Preloader} from \"../../../main/m1-ui/common/Preloader/Preloader\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\n\r\n\r\nfunction GenerateNewPassword() {\r\n\r\n    const {id} = useParams();\r\n    const history = useHistory()\r\n    let dispatch = useDispatch()\r\n\r\n    let state = useSelector<AppRootStateType, InitialStateType>(state => state.passwordGenerationPage)\r\n    let [password, setPassword] = useState<string>(\"\")\r\n\r\n\r\n    const onInputChange = (value: string) => setPassword(value)\r\n    const resetPass = () => {\r\n        dispatch(setNewPasswordTC({password: password, resetPasswordToken: id}, history))\r\n        setPassword(\"\")\r\n    }\r\n\r\n   // if (state.response !== null) {\r\n   //     return <Redirect to={\"/login/\"}/>\r\n   // }\r\n\r\n    return (state.loading ? <Preloader/> :\r\n            <div>\r\n                <h1>Password Generation Page</h1>\r\n                <h3>Change password:</h3>\r\n                <h4>Please enter your new password.</h4>\r\n                <Input onChange={onInputChange} error={false} value={password} placeholder={\"Please set new password\"}/>\r\n                <Button onClick={resetPass} text={\"Set new password\"}/>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default GenerateNewPassword;","import React from \"react\";\r\nimport GenerateNewPassword from \"../../../features/f1-auth/a3-password_recovery/GenerateNewPassword\";\r\n\r\nfunction PasswordGenerationPage() {\r\n    return <GenerateNewPassword/>\r\n}\r\n\r\nexport default PasswordGenerationPage;","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/2.0/\",\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout(){\r\n        const promise = instance.delete('auth/me');\r\n        return promise;\r\n    },\r\n    authMe() {\r\n        return instance.post('auth/me',{});\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n\r\n    rememberMe: boolean\r\n    _id?: string;\r\n    email: string;\r\n    name?: string;\r\n    avatar?: string;\r\n    publicCardPacksCount?: number; // количество колод\r\n\r\n    created?: Date;\r\n    updated?: Date;\r\n    isAdmin?: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    error?: string;\r\n}\r\n\r\n\r\n","const initialState: InitialStateType = {\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType =  'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppInitializedAC = (isInitialized:  boolean) => ({ type: 'APP/SET-INITIALIZED', isInitialized } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppInitializedActionType\r\n\r\n\r\nexport type InitialStateType = any\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, SetAppErrorActionType, SetAppStatusActionType, setAppStatusAC} from '../../m2-bll/app-reducer'\r\n\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.response ? error.response.data.error : error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../m3-dal/login-api\";\r\nimport {handleServerNetworkError} from \"../m1-ui/utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoginIn: false,\r\n    UserData: {\r\n        _id: '0',\r\n        email: '',\r\n        name: '',\r\n        publicCardPacksCount: 0, // количество колод\r\n        created: new Date(),\r\n        updated: new Date(),\r\n        isAdmin: false,\r\n        verified: false, // подтвердил ли почту\r\n        rememberMe: false,\r\n        error: ''\r\n\r\n    }\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'SET-IS-LOGIN-IN':\r\n            return {...state, isLoginIn: action.value}\r\n        case 'SET-IS-LOGOUT-IN':\r\n            return {...state, isLoginIn: action.value}\r\n        case 'SET-USER-DATA-IN':\r\n            return {...state, UserData: action.Userdata}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'SET-IS-LOGIN-IN', value} as const)\r\nexport const setUsersDataAC = (Userdata: LoginParamsType) =>\r\n    ({type: 'SET-USER-DATA-IN', Userdata} as const)\r\nexport const setIsLogoutInAC = (value: boolean) =>\r\n    ({type: 'SET-IS-LOGOUT-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch) => {\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setUsersDataAC(res.data))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(false))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n    })\r\n}\r\n\r\n// types\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setUsersDataAC>\r\n    | ReturnType<typeof setIsLogoutInAC>\r\ntype InitialStateType = {\r\n    isLoginIn: boolean,\r\n    UserData: LoginParamsType\r\n}\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {authAPI} from \"../m3-dal/login-api\";\r\nimport {setIsLoggedInAC, setUsersDataAC} from \"./login-reducer\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const ProfileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case'SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'SET-INITIALIZED', isInitialized} as const)\r\n\r\n\r\n// thunks\r\nexport const isInitializedTC = () => (dispatch: ThunkDispatch) => {\r\n    authAPI.authMe().then(res => {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setInitializedAC(true))\r\n        dispatch(setUsersDataAC(res.data))\r\n    })\r\n        .catch(error => console.log(error))\r\n}\r\n\r\n// types\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setInitializedAC>\r\n    | ReturnType<typeof setUsersDataAC>\r\ntype InitialStateType = {\r\n    isInitialized: boolean,\r\n\r\n}\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {isInitializedTC} from \"../../m2-bll/profile-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nfunction ProfilePage() {\r\n\r\n    const {name,avatar,email} = useSelector((state:AppRootStateType)=> state.auth.UserData)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.profilePage.isInitialized)\r\n    const dispatch = useDispatch();\r\n    const isLoginIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoginIn);\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(isInitializedTC());\r\n    },[])\r\n    if(isLoginIn === false){\r\n        return <Redirect exact to={'/login'}/>\r\n    }\r\n    if(!isInitialized){\r\n        return <div style={{position: 'fixed',top:'30%',textAlign:'center',width:'100%'}}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Name:{name}</h1>\r\n            <img src={avatar} alt=\"\" style={{width:'100px', height:'100px'}}/>\r\n            <div>E-mail: {email}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfilePage;","import React, {useCallback} from \"react\";\r\nimport style from \"./headerNavbar.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logoutTC} from \"../../m2-bll/login-reducer\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {useLocation} from \"react-router\";\r\n\r\nfunction HeaderNavbar() {\r\n    const location = useLocation()\r\n    const dispatch = useDispatch();\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoginIn);\r\n\r\n    if (isLoginIn === false && location.pathname.length!== 57) {\r\n        return <Redirect exact to={'/login'}/>\r\n    }\r\n    return (\r\n            <nav className={style.menu}>\r\n                <ul className={style.menu__list}>\r\n                    {isLoginIn && <li className={style.menu__group}>\r\n                        <button onClick={logoutHandler} className={style.menu__link_logout}>Log out</button>\r\n                    </li>}\r\n                    <li className={style.menu__group}><NavLink className={style.menu__link}\r\n                                                         to=\"/registration\">registration</NavLink></li>\r\n                    <li className={style.menu__group}><NavLink className={style.menu__link} to=\"/password-reset\">password\r\n                        reset</NavLink></li>\r\n                    <li className={style.menu__group}><NavLink className={style.menu__link} to=\"/password-generation\">password\r\n                        generation</NavLink></li>\r\n                    <li className={style.menu__group}><NavLink className={style.menu__link} to=\"/profile\">profile</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default HeaderNavbar;\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {setAppErrorAC} from \"../../../m2-bll/app-reducer\";\r\n\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = !!error ;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/m2-bll/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../../main/m2-bll/login-reducer\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {ErrorSnackbar} from \"../../../main/m1-ui/common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {FormGroup} from \"@material-ui/core\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function LoginNew() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const isLoginIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoginIn);\r\n\r\n    const formik = useFormik({\r\n        validate:(values)=>{\r\n            if (!values.email){\r\n                return {\r\n                    email:'Please enter your email'\r\n                }\r\n            }\r\n            if (!values.password){\r\n                return {\r\n                    password: 'Please enter your password'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password:'',\r\n            rememberMe: false,\r\n            verified:false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    });\r\n\r\n    if(isLoginIn === true){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox color={\"primary\"}/>}\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                        checked={formik.values.rememberMe}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <NavLink to={\"/password-reset\"} >\r\n                                Forgot password?\r\n                            </NavLink>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <NavLink to={\"/registration\"}>\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </NavLink>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n            <ErrorSnackbar/>\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport Login from \"../../../features/f1-auth/a1-login/Login\";\r\nimport LoginNew from \"../../../features/f1-auth/a1-login/LoginNew\";\r\n\r\n\r\nfunction LoginPage() {\r\n\r\n    return <LoginNew/>\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\r\nimport RegistrationPage from \"./pages/RegistrationPage\";\r\nimport PasswordResetPage from \"./pages/PasswordResetPage\";\r\nimport PasswordGenerationPage from \"./pages/PasswordGenerationPage\";\r\nimport ProfilePage from \"./pages/ProfilePage\";\r\nimport HeaderNavbar from \"./header/HeaderNavbar\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <HeaderNavbar/>\r\n                <>\r\n                    <Switch>\r\n                        <Route path={\"/login\"} render={() => (<LoginPage/>)}/>\r\n                        <Route path=\"/registration\" render={() => (<RegistrationPage/>)}/>\r\n                        <Route path=\"/password-reset\" render={() => (<PasswordResetPage/>)}/>}\r\n                        <Route path=\"/password-generation/:id\" render={() => (<PasswordGenerationPage/>)}/>\r\n                        <Route path=\"/password-generation/\"\r\n                               render={() => (<h1>We send to your mail link for password change. Use it!</h1>)}/>\r\n                        <Route path=\"/profile\" render={() => (<ProfilePage/>)}/>\r\n                    </Switch>\r\n                </>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {passwordResetReducer} from \"./password-reset-reducer\";\r\nimport {passwordGenerationReducer} from \"./password-gereration-reducer\";\r\nimport {authReducer} from \"./login-reducer\";\r\nimport {ProfileReducer} from \"./profile-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    registrationPage: registrationReducer,\r\n    passwordResetPage: passwordResetReducer,\r\n    passwordGenerationPage: passwordGenerationReducer,\r\n    profilePage: ProfileReducer,\r\n    auth:authReducer,\r\n\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","const initialState: InitialStateType = null\r\n\r\nexport const registrationReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const ActionCreator = () => ({type: ''} as const)\r\n\r\nexport type ActionCreatorActionType = ReturnType<typeof ActionCreator>\r\nexport type InitialStateType = any\r\ntype ActionsType =\r\n    | ActionCreatorActionType\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./main/m2-bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"headerNavbar_menu__1T5wg\",\"menu__link\":\"headerNavbar_menu__link__1JKf_\",\"menu__link_logout\":\"headerNavbar_menu__link_logout__2TVLw\",\"menu__list\":\"headerNavbar_menu__list__2PUd2\",\"menu__group\":\"headerNavbar_menu__group__3nCIy\",\"page\":\"headerNavbar_page__1a2cw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"input_group__3Gv8x\",\"bar\":\"input_bar__W2-9W\"};"],"sourceRoot":""}